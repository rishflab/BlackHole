#version 450

#define EPSILON 0.0001

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

struct Intersection {
    vec4 position;
    vec4 normal;
    vec3 edge;
    float a;
};

struct Light {
    vec4 position;
    float intensity;
};

layout(binding = 0, rgba8) uniform image2D img;


layout(set = 1, binding = 0) uniform Lights {
    Light lights[];
};

layout(set = 1, std430, binding = 1) buffer Intersections {
    Intersection intersections[800][800];
};


void main() {

    uvec2 current = gl_GlobalInvocationID.xy;

    Intersection intersection = intersections[current.x][current.y];

    Light light = lights[0];

    vec4 to_write = vec4(1.0, 0.0, 1.0, 1.0);

    if (light.intensity == 20.0) {
        to_write = vec4(1.0, 0.0, 0.0, 1.0);
    }

    if (intersection.a > EPSILON) {

        vec4 light_direction = normalize(light.position - intersection.position);

        //float light_distance = distance(light.position, intersection.position);

        float shade = 0.0;
        float diffuse = 0.0;
        float ambient = 0.1;

//        vec3 P = cross(light_direction.xyz, intersection.edge.xyz);
//        float det = dot(intersection.edge.xyz, P);

        diffuse =  (0.02 * 20 * max(-1.0 * dot(intersection.normal, light_direction), 0.0));

        shade = ambient + diffuse;

        to_write = vec4(shade, shade, shade, 1.0);

    }

    imageStore(img, ivec2(current.xy), to_write);

}