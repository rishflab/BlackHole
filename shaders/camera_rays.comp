#version 450

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

struct Ray {
    vec3 origin;
    vec3 direction;
};

layout(binding = 0) buffer restrict readonly Camera {
    mat4 view;
};


layout(std430,  binding = 1) buffer restrict writeonly Rays {
    Ray rays[][16];
};

layout(binding = 2) buffer Resolution {
    uvec2 resolution;
};


void main() {

    float aspect_ratio = float(resolution.x)/float(resolution.y);

    uint thread = gl_GlobalInvocationID.x;

    uint sample_no = gl_GlobalInvocationID.y;

    uint quotient = thread/resolution.x;

    uint remainder = uint(mod(thread, resolution.x));

    uvec2 current = uvec2(remainder, quotient);

    vec2[16] jitter_kernel = {
        vec2(0.22, 0.45),
        vec2(0.11, 0.44),
        vec2(0.25, 0.74),
        vec2(0.53, 0.15),
        vec2(0.50, 0.65),
        vec2(0.85, 0.28),
        vec2(0.73, 0.60),
        vec2(0.45, 0.77),
        vec2(0.52, 0.55),
        vec2(0.41, 0.44),
        vec2(0.75, 0.74),
        vec2(0.58, 0.25),
        vec2(0.22, 0.85),
        vec2(0.35, 0.23),
        vec2(0.73, 0.16),
        vec2(0.45, 0.09),
    };

    vec3 cam_origin = vec3(0.0, 0.0, 0.0);

    //vec2 raster_coord = vec2(float(current.x), float(current.y)) + vec2(0.5, 0.5);

    vec2 raster_coord = vec2(float(current.x), float(current.y)) + jitter_kernel[sample_no];

    vec2 norm_coords = raster_coord / vec2(resolution.x, resolution.y);

    vec2 screen_coord = vec2(aspect_ratio*-1.0, 1.0) + (vec2(aspect_ratio * 2.0, -2.0) * norm_coords);

    vec3 screen_ray_intersection = vec3(screen_coord, -1.0);

    cam_origin = (view * vec4(cam_origin, 1.0)).xyz;

    screen_ray_intersection = (view * vec4(screen_ray_intersection, 1.0)).xyz;

    vec3 ray_direction = normalize(screen_ray_intersection - cam_origin);

    rays[thread][sample_no] =  Ray(cam_origin, ray_direction);

}