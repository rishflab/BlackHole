#version 450

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

struct Ray {
    vec3 origin;
    vec3 direction;
};

layout(binding = 0) buffer restrict readonly Camera {
    mat4 view;
};


layout(std430,  binding = 1) buffer restrict writeonly Rays {
    Ray rays[][8];
};

layout(binding = 2) buffer Resolution {
    uvec2 resolution;
};


void main() {

    float aspect_ratio = float(resolution.x)/float(resolution.y);

    uint thread = gl_GlobalInvocationID.x;

    uint samp = gl_GlobalInvocationID.y;

    uint quotient = thread/resolution.x;

    uint remainder = uint(mod(thread, resolution.x));

    uvec2 current = uvec2(remainder, quotient);

    vec3 cam_origin = vec3(0.0, 0.0, 0.0);

    vec2 raster_coord = vec2(float(current.x), float(current.y)) + vec2(0.5, 0.5);

    vec2 norm_coords = raster_coord / vec2(resolution.x, resolution.y);

    vec2 screen_coord = vec2(aspect_ratio*-1.0, 1.0) + (vec2(aspect_ratio * 2.0, -2.0) * norm_coords);

    vec3 screen_ray_intersection = vec3(screen_coord, -1.0);

    cam_origin = (view * vec4(cam_origin, 1.0)).xyz;

    screen_ray_intersection = (view * vec4(screen_ray_intersection, 1.0)).xyz;

    vec3 ray_direction = normalize(screen_ray_intersection - cam_origin);

    rays[thread][samp] =  Ray(cam_origin, ray_direction);

}